// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace CRIS
{
    using Models;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SpeechServicesAPIv20.
    /// </summary>
    public static partial class SpeechServicesAPIv20Extensions
    {
            /// <summary>
            /// Gets the list of accuracy tests for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetAccuracyTests(this ISpeechServicesAPIv20 operations)
            {
                return operations.GetAccuracyTestsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of accuracy tests for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAccuracyTestsAsync(this ISpeechServicesAPIv20 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAccuracyTestsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new accuracy test.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testDefinition'>
            /// The details of the new accuracy test.
            /// </param>
            public static object CreateAccuracyTest(this ISpeechServicesAPIv20 operations, TestDefinition testDefinition)
            {
                return operations.CreateAccuracyTestAsync(testDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new accuracy test.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testDefinition'>
            /// The details of the new accuracy test.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateAccuracyTestAsync(this ISpeechServicesAPIv20 operations, TestDefinition testDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAccuracyTestWithHttpMessagesAsync(testDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the accuracy test identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the accuracy test.
            /// </param>
            public static object GetAccuracyTest(this ISpeechServicesAPIv20 operations, System.Guid id)
            {
                return operations.GetAccuracyTestAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the accuracy test identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the accuracy test.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAccuracyTestAsync(this ISpeechServicesAPIv20 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAccuracyTestWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the accuracy test identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the accuracy test.
            /// </param>
            public static ErrorContent DeleteAccuracyTest(this ISpeechServicesAPIv20 operations, System.Guid id)
            {
                return operations.DeleteAccuracyTestAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the accuracy test identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the accuracy test.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorContent> DeleteAccuracyTestAsync(this ISpeechServicesAPIv20 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAccuracyTestWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the mutable details of the test identified by its id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the accuracy test.
            /// </param>
            /// <param name='testUpdate'>
            /// The object containing the updated fields of the test.
            /// </param>
            public static object UpdateAccuracyTest(this ISpeechServicesAPIv20 operations, System.Guid id, TestUpdate testUpdate)
            {
                return operations.UpdateAccuracyTestAsync(id, testUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the mutable details of the test identified by its id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the accuracy test.
            /// </param>
            /// <param name='testUpdate'>
            /// The object containing the updated fields of the test.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateAccuracyTestAsync(this ISpeechServicesAPIv20 operations, System.Guid id, TestUpdate testUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateAccuracyTestWithHttpMessagesAsync(id, testUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of datasets for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetDatasets(this ISpeechServicesAPIv20 operations)
            {
                return operations.GetDatasetsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of datasets for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDatasetsAsync(this ISpeechServicesAPIv20 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the dataset identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the dataset.
            /// </param>
            public static object GetDataset(this ISpeechServicesAPIv20 operations, System.Guid id)
            {
                return operations.GetDatasetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the dataset identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the dataset.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDatasetAsync(this ISpeechServicesAPIv20 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified dataset.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the dataset.
            /// </param>
            public static ErrorContent DeleteDataset(this ISpeechServicesAPIv20 operations, System.Guid id)
            {
                return operations.DeleteDatasetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified dataset.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the dataset.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorContent> DeleteDatasetAsync(this ISpeechServicesAPIv20 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDatasetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the mutable details of the dataset identified by its ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the dataset.
            /// </param>
            /// <param name='datasetUpdate'>
            /// The updated values for the dataset.
            /// </param>
            public static object UpdateDataset(this ISpeechServicesAPIv20 operations, System.Guid id, DatasetUpdate datasetUpdate)
            {
                return operations.UpdateDatasetAsync(id, datasetUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the mutable details of the dataset identified by its ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the dataset.
            /// </param>
            /// <param name='datasetUpdate'>
            /// The updated values for the dataset.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateDatasetAsync(this ISpeechServicesAPIv20 operations, System.Guid id, DatasetUpdate datasetUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDatasetWithHttpMessagesAsync(id, datasetUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of supported locales for data imports.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSupportedLocalesForDatasets(this ISpeechServicesAPIv20 operations)
            {
                return operations.GetSupportedLocalesForDatasetsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of supported locales for data imports.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSupportedLocalesForDatasetsAsync(this ISpeechServicesAPIv20 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSupportedLocalesForDatasetsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Uploads data and creates a new dataset.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of this data import (always add this string for any import).
            /// </param>
            /// <param name='description'>
            /// Optional description of this data import.
            /// </param>
            /// <param name='locale'>
            /// The locale of this data import (always add this string for any import).
            /// </param>
            /// <param name='dataImportKind'>
            /// The kind of the data import (always add this string for any import).
            /// Possible values include: 'Language', 'Acoustic', 'Pronunciation',
            /// 'CustomVoice', 'LanguageGeneration'
            /// </param>
            /// <param name='properties'>
            /// Optional properties of this data import (json serialized object with
            /// key/values, where all values must be strings)
            /// </param>
            /// <param name='audiodata'>
            /// A zip file containing the audio data (this and the audio archive file for 
            /// acoustic data imports).
            /// </param>
            /// <param name='transcriptions'>
            /// A text file containing the transcriptions for the audio data (this and the
            /// transcriptions file for acoustic data imports).
            /// </param>
            /// <param name='languagedata'>
            /// A text file containing the language or pronunciation data (only this file
            /// for language data imports).
            /// </param>
            public static object UploadDataset(this ISpeechServicesAPIv20 operations, string name = default(string), string description = default(string), string locale = default(string), string dataImportKind = default(string), string properties = default(string), Stream audiodata = default(Stream), Stream transcriptions = default(Stream), Stream languagedata = default(Stream))
            {
                return operations.UploadDatasetAsync(name, description, locale, dataImportKind, properties, audiodata, transcriptions, languagedata).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads data and creates a new dataset.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of this data import (always add this string for any import).
            /// </param>
            /// <param name='description'>
            /// Optional description of this data import.
            /// </param>
            /// <param name='locale'>
            /// The locale of this data import (always add this string for any import).
            /// </param>
            /// <param name='dataImportKind'>
            /// The kind of the data import (always add this string for any import).
            /// Possible values include: 'Language', 'Acoustic', 'Pronunciation',
            /// 'CustomVoice', 'LanguageGeneration'
            /// </param>
            /// <param name='properties'>
            /// Optional properties of this data import (json serialized object with
            /// key/values, where all values must be strings)
            /// </param>
            /// <param name='audiodata'>
            /// A zip file containing the audio data (this and the audio archive file for
            /// acoustic data imports).
            /// </param>
            /// <param name='transcriptions'>
            /// A text file containing the transcriptions for the audio data (this and the
            /// transcriptions file for acoustic data imports).
            /// </param>
            /// <param name='languagedata'>
            /// A text file containing the language or pronunciation data (only this file
            /// for language data imports).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UploadDatasetAsync(this ISpeechServicesAPIv20 operations, string name = default(string), string description = default(string), string locale = default(string), string dataImportKind = default(string), string properties = default(string), Stream audiodata = default(Stream), Stream transcriptions = default(Stream), Stream languagedata = default(Stream), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadDatasetWithHttpMessagesAsync(name, description, locale, dataImportKind, properties, audiodata, transcriptions, languagedata, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of endpoints for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetEndpoints(this ISpeechServicesAPIv20 operations)
            {
                return operations.GetEndpointsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of endpoints for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetEndpointsAsync(this ISpeechServicesAPIv20 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEndpointsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// The details of the endpoint.
            /// </param>
            public static object CreateEndpoint(this ISpeechServicesAPIv20 operations, EndpointDefinition endpoint)
            {
                return operations.CreateEndpointAsync(endpoint).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// The details of the endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateEndpointAsync(this ISpeechServicesAPIv20 operations, EndpointDefinition endpoint, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateEndpointWithHttpMessagesAsync(endpoint, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the endpoint identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint.
            /// </param>
            public static object GetEndpoint(this ISpeechServicesAPIv20 operations, System.Guid id)
            {
                return operations.GetEndpointAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the endpoint identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetEndpointAsync(this ISpeechServicesAPIv20 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEndpointWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the endpoint identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint.
            /// </param>
            public static ErrorContent DeleteEndpoint(this ISpeechServicesAPIv20 operations, System.Guid id)
            {
                return operations.DeleteEndpointAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the endpoint identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorContent> DeleteEndpointAsync(this ISpeechServicesAPIv20 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteEndpointWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the metadata of the endpoint identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='endpointUpdate'>
            /// The updated values for the endpoint.
            /// </param>
            public static object UpdateEndpoint(this ISpeechServicesAPIv20 operations, System.Guid id, EndpointUpdate endpointUpdate)
            {
                return operations.UpdateEndpointAsync(id, endpointUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the metadata of the endpoint identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='endpointUpdate'>
            /// The updated values for the endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateEndpointAsync(this ISpeechServicesAPIv20 operations, System.Guid id, EndpointUpdate endpointUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateEndpointWithHttpMessagesAsync(id, endpointUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of supported locales for endpoint creations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSupportedLocalesForEndpoints(this ISpeechServicesAPIv20 operations)
            {
                return operations.GetSupportedLocalesForEndpointsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of supported locales for endpoint creations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSupportedLocalesForEndpointsAsync(this ISpeechServicesAPIv20 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSupportedLocalesForEndpointsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of endpoint data export tasks for the authenticated user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the endpoint.
            /// </param>
            public static object GetEndpointDataExports(this ISpeechServicesAPIv20 operations, System.Guid endpointId)
            {
                return operations.GetEndpointDataExportsAsync(endpointId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of endpoint data export tasks for the authenticated user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetEndpointDataExportsAsync(this ISpeechServicesAPIv20 operations, System.Guid endpointId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEndpointDataExportsWithHttpMessagesAsync(endpointId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new endpoint data export task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='endpointDataDefinition'>
            /// The details of the new endpoint data export.
            /// </param>
            public static object CreateEndpointDataExport(this ISpeechServicesAPIv20 operations, System.Guid endpointId, EndpointDataDefinition endpointDataDefinition)
            {
                return operations.CreateEndpointDataExportAsync(endpointId, endpointDataDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new endpoint data export task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='endpointDataDefinition'>
            /// The details of the new endpoint data export.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateEndpointDataExportAsync(this ISpeechServicesAPIv20 operations, System.Guid endpointId, EndpointDataDefinition endpointDataDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateEndpointDataExportWithHttpMessagesAsync(endpointId, endpointDataDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the transcriptions and captured audio files associated with the
            /// endpoint identified by the given ID.
            /// Note: Deletion will happen in the background and can take up to a day.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the endpoint.
            /// </param>
            public static ErrorContent DeleteEndpointData(this ISpeechServicesAPIv20 operations, System.Guid endpointId)
            {
                return operations.DeleteEndpointDataAsync(endpointId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the transcriptions and captured audio files associated with the
            /// endpoint identified by the given ID.
            /// Note: Deletion will happen in the background and can take up to a day.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorContent> DeleteEndpointDataAsync(this ISpeechServicesAPIv20 operations, System.Guid endpointId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteEndpointDataWithHttpMessagesAsync(endpointId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the specified endpoint data export task for the authenticated user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='id'>
            /// The identifier of the data export.
            /// </param>
            public static object GetEndpointDataExport(this ISpeechServicesAPIv20 operations, System.Guid endpointId, System.Guid id)
            {
                return operations.GetEndpointDataExportAsync(endpointId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified endpoint data export task for the authenticated user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='id'>
            /// The identifier of the data export.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetEndpointDataExportAsync(this ISpeechServicesAPIv20 operations, System.Guid endpointId, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEndpointDataExportWithHttpMessagesAsync(endpointId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the endpoint data export task identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint data export.
            /// </param>
            public static ErrorContent DeleteEndpointDataExport(this ISpeechServicesAPIv20 operations, System.Guid endpointId, System.Guid id)
            {
                return operations.DeleteEndpointDataExportAsync(endpointId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the endpoint data export task identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint data export.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorContent> DeleteEndpointDataExportAsync(this ISpeechServicesAPIv20 operations, System.Guid endpointId, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteEndpointDataExportWithHttpMessagesAsync(endpointId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of models for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetModels(this ISpeechServicesAPIv20 operations)
            {
                return operations.GetModelsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of models for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetModelsAsync(this ISpeechServicesAPIv20 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetModelsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new model.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelDefinition'>
            /// The details of the new model.
            /// </param>
            public static object CreateModel(this ISpeechServicesAPIv20 operations, ModelDefinition modelDefinition)
            {
                return operations.CreateModelAsync(modelDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new model.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelDefinition'>
            /// The details of the new model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateModelAsync(this ISpeechServicesAPIv20 operations, ModelDefinition modelDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateModelWithHttpMessagesAsync(modelDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the model identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the model.
            /// </param>
            public static object GetModel(this ISpeechServicesAPIv20 operations, System.Guid id)
            {
                return operations.GetModelAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the model identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetModelAsync(this ISpeechServicesAPIv20 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetModelWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the model identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the model.
            /// </param>
            public static ErrorContent DeleteModel(this ISpeechServicesAPIv20 operations, System.Guid id)
            {
                return operations.DeleteModelAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the model identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorContent> DeleteModelAsync(this ISpeechServicesAPIv20 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteModelWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the metadata of the model identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the model.
            /// </param>
            /// <param name='modelUpdate'>
            /// The updated values for the model.
            /// </param>
            public static object UpdateModel(this ISpeechServicesAPIv20 operations, System.Guid id, ModelUpdate modelUpdate)
            {
                return operations.UpdateModelAsync(id, modelUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the metadata of the model identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the model.
            /// </param>
            /// <param name='modelUpdate'>
            /// The updated values for the model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateModelAsync(this ISpeechServicesAPIv20 operations, System.Guid id, ModelUpdate modelUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateModelWithHttpMessagesAsync(id, modelUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of supported locales for model adaptation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSupportedLocalesForModels(this ISpeechServicesAPIv20 operations)
            {
                return operations.GetSupportedLocalesForModelsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of supported locales for model adaptation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSupportedLocalesForModelsAsync(this ISpeechServicesAPIv20 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSupportedLocalesForModelsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Initiates a task that moves all entities associated with the authenticated
            /// subscription to another one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='moveToSubscriptionDefinition'>
            /// The details of the subscription the entities are moved to.
            /// </param>
            public static ErrorContent PostMoveToSubscription(this ISpeechServicesAPIv20 operations, MoveToSubscriptionDefinition moveToSubscriptionDefinition)
            {
                return operations.PostMoveToSubscriptionAsync(moveToSubscriptionDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Initiates a task that moves all entities associated with the authenticated
            /// subscription to another one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='moveToSubscriptionDefinition'>
            /// The details of the subscription the entities are moved to.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorContent> PostMoveToSubscriptionAsync(this ISpeechServicesAPIv20 operations, MoveToSubscriptionDefinition moveToSubscriptionDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostMoveToSubscriptionWithHttpMessagesAsync(moveToSubscriptionDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of transcriptions for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetTranscriptions(this ISpeechServicesAPIv20 operations)
            {
                return operations.GetTranscriptionsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of transcriptions for the authenticated subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTranscriptionsAsync(this ISpeechServicesAPIv20 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTranscriptionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new transcription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transcription'>
            /// The details of the new transcription.
            /// </param>
            public static object CreateTranscription(this ISpeechServicesAPIv20 operations, TranscriptionDefinition transcription)
            {
                return operations.CreateTranscriptionAsync(transcription).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new transcription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transcription'>
            /// The details of the new transcription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateTranscriptionAsync(this ISpeechServicesAPIv20 operations, TranscriptionDefinition transcription, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTranscriptionWithHttpMessagesAsync(transcription, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the transcription identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the transcription.
            /// </param>
            public static object GetTranscription(this ISpeechServicesAPIv20 operations, System.Guid id)
            {
                return operations.GetTranscriptionAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the transcription identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the transcription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTranscriptionAsync(this ISpeechServicesAPIv20 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTranscriptionWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified transcription task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the transcription.
            /// </param>
            public static ErrorContent DeleteTranscription(this ISpeechServicesAPIv20 operations, System.Guid id)
            {
                return operations.DeleteTranscriptionAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified transcription task.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the transcription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorContent> DeleteTranscriptionAsync(this ISpeechServicesAPIv20 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTranscriptionWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the mutable details of the transcription identified by its ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the transcription.
            /// </param>
            /// <param name='transcriptionUpdate'>
            /// The updated values for the transcription.
            /// </param>
            public static object UpdateTranscription(this ISpeechServicesAPIv20 operations, System.Guid id, TranscriptionUpdate transcriptionUpdate)
            {
                return operations.UpdateTranscriptionAsync(id, transcriptionUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the mutable details of the transcription identified by its ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the transcription.
            /// </param>
            /// <param name='transcriptionUpdate'>
            /// The updated values for the transcription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateTranscriptionAsync(this ISpeechServicesAPIv20 operations, System.Guid id, TranscriptionUpdate transcriptionUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTranscriptionWithHttpMessagesAsync(id, transcriptionUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of supported locales for offline transcriptions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSupportedLocalesForTranscriptions(this ISpeechServicesAPIv20 operations)
            {
                return operations.GetSupportedLocalesForTranscriptionsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of supported locales for offline transcriptions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSupportedLocalesForTranscriptionsAsync(this ISpeechServicesAPIv20 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSupportedLocalesForTranscriptionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The action returns the health of the different components of the serivce.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static HealthStatusResponse GetHealthStatus(this ISpeechServicesAPIv20 operations)
            {
                return operations.GetHealthStatusAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// The action returns the health of the different components of the serivce.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HealthStatusResponse> GetHealthStatusAsync(this ISpeechServicesAPIv20 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHealthStatusWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all voice datasets of a user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetVoiceDatasets(this ISpeechServicesAPIv20 operations)
            {
                return operations.GetVoiceDatasetsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all voice datasets of a user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVoiceDatasetsAsync(this ISpeechServicesAPIv20 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVoiceDatasetsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of supported locales for custom voice data imports.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSupportedLocalesForVoiceDatasets(this ISpeechServicesAPIv20 operations)
            {
                return operations.GetSupportedLocalesForVoiceDatasetsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of supported locales for custom voice data imports.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSupportedLocalesForVoiceDatasetsAsync(this ISpeechServicesAPIv20 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSupportedLocalesForVoiceDatasetsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Uploads data and creates a new voice data object.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of this data import (always add this string for any import).
            /// </param>
            /// <param name='description'>
            /// Optional description of this data import.
            /// </param>
            /// <param name='locale'>
            /// The locale of this data import (always add this string for any import).
            /// </param>
            /// <param name='dataImportKind'>
            /// The kind of the data import (always add this string for any import).
            /// Possible values include: 'Language', 'Acoustic', 'Pronunciation',
            /// 'CustomVoice', 'LanguageGeneration'
            /// </param>
            /// <param name='properties'>
            /// Optional properties of this data import (json serialized object with
            /// key/values, where all values must be strings)
            /// </param>
            /// <param name='audiodata'>
            /// A zip file containing the audio data.
            /// </param>
            /// <param name='transcriptions'>
            /// The transcriptions text file of the audio data.
            /// </param>
            public static ErrorContent UploadVoiceDataset(this ISpeechServicesAPIv20 operations, string name = default(string), string description = default(string), string locale = default(string), string dataImportKind = default(string), string properties = default(string), Stream audiodata = default(Stream), Stream transcriptions = default(Stream))
            {
                return operations.UploadVoiceDatasetAsync(name, description, locale, dataImportKind, properties, audiodata, transcriptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads data and creates a new voice data object.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of this data import (always add this string for any import).
            /// </param>
            /// <param name='description'>
            /// Optional description of this data import.
            /// </param>
            /// <param name='locale'>
            /// The locale of this data import (always add this string for any import).
            /// </param>
            /// <param name='dataImportKind'>
            /// The kind of the data import (always add this string for any import).
            /// Possible values include: 'Language', 'Acoustic', 'Pronunciation',
            /// 'CustomVoice', 'LanguageGeneration'
            /// </param>
            /// <param name='properties'>
            /// Optional properties of this data import (json serialized object with
            /// key/values, where all values must be strings)
            /// </param>
            /// <param name='audiodata'>
            /// A zip file containing the audio data.
            /// </param>
            /// <param name='transcriptions'>
            /// The transcriptions text file of the audio data.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorContent> UploadVoiceDatasetAsync(this ISpeechServicesAPIv20 operations, string name = default(string), string description = default(string), string locale = default(string), string dataImportKind = default(string), string properties = default(string), Stream audiodata = default(Stream), Stream transcriptions = default(Stream), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadVoiceDatasetWithHttpMessagesAsync(name, description, locale, dataImportKind, properties, audiodata, transcriptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the voice dataset with the given id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice dataset
            /// </param>
            public static ErrorContent DeleteVoiceDataset(this ISpeechServicesAPIv20 operations, System.Guid id)
            {
                return operations.DeleteVoiceDatasetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the voice dataset with the given id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice dataset
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorContent> DeleteVoiceDatasetAsync(this ISpeechServicesAPIv20 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteVoiceDatasetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the mutable details of the voice dataset identified by its ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice dataset.
            /// </param>
            /// <param name='datasetUpdate'>
            /// The updated values for the voice dataset.
            /// </param>
            public static object UpdateVoiceDataset(this ISpeechServicesAPIv20 operations, System.Guid id, DatasetUpdate datasetUpdate)
            {
                return operations.UpdateVoiceDatasetAsync(id, datasetUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the mutable details of the voice dataset identified by its ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice dataset.
            /// </param>
            /// <param name='datasetUpdate'>
            /// The updated values for the voice dataset.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateVoiceDatasetAsync(this ISpeechServicesAPIv20 operations, System.Guid id, DatasetUpdate datasetUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateVoiceDatasetWithHttpMessagesAsync(id, datasetUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of voice endpoint details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetVoiceDeployments(this ISpeechServicesAPIv20 operations)
            {
                return operations.GetVoiceDeploymentsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of voice endpoint details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVoiceDeploymentsAsync(this ISpeechServicesAPIv20 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVoiceDeploymentsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new voice endpoint object.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endPoint'>
            /// </param>
            public static ErrorContent CreateVoiceDeployment(this ISpeechServicesAPIv20 operations, EndpointDefinition endPoint)
            {
                return operations.CreateVoiceDeploymentAsync(endPoint).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new voice endpoint object.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endPoint'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorContent> CreateVoiceDeploymentAsync(this ISpeechServicesAPIv20 operations, EndpointDefinition endPoint, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateVoiceDeploymentWithHttpMessagesAsync(endPoint, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the details of a Custom Voice endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object GetVoiceDeployment(this ISpeechServicesAPIv20 operations, System.Guid id)
            {
                return operations.GetVoiceDeploymentAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the details of a Custom Voice endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVoiceDeploymentAsync(this ISpeechServicesAPIv20 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVoiceDeploymentWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the specified voice endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of voice endpoint.
            /// </param>
            public static ErrorContent DeleteDeployment(this ISpeechServicesAPIv20 operations, System.Guid id)
            {
                return operations.DeleteDeploymentAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the specified voice endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of voice endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorContent> DeleteDeploymentAsync(this ISpeechServicesAPIv20 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDeploymentWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the name and description of the endpoint identified by the given
            /// ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='endpointUpdate'>
            /// The updated values for the endpoint.
            /// </param>
            public static object UpdateVoiceEndpoint(this ISpeechServicesAPIv20 operations, System.Guid id, EndpointUpdate endpointUpdate)
            {
                return operations.UpdateVoiceEndpointAsync(id, endpointUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the name and description of the endpoint identified by the given
            /// ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the endpoint.
            /// </param>
            /// <param name='endpointUpdate'>
            /// The updated values for the endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateVoiceEndpointAsync(this ISpeechServicesAPIv20 operations, System.Guid id, EndpointUpdate endpointUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateVoiceEndpointWithHttpMessagesAsync(id, endpointUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of supported locales for custom voice Endpoints.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSupportedLocalesForVoiceEndpoints(this ISpeechServicesAPIv20 operations)
            {
                return operations.GetSupportedLocalesForVoiceEndpointsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of supported locales for custom voice Endpoints.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSupportedLocalesForVoiceEndpointsAsync(this ISpeechServicesAPIv20 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSupportedLocalesForVoiceEndpointsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of voice model details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetVoiceModels(this ISpeechServicesAPIv20 operations)
            {
                return operations.GetVoiceModelsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of voice model details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVoiceModelsAsync(this ISpeechServicesAPIv20 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVoiceModelsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new voice model object.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelDefinition'>
            /// </param>
            public static ErrorContent CreateVoiceModel(this ISpeechServicesAPIv20 operations, ModelDefinition modelDefinition)
            {
                return operations.CreateVoiceModelAsync(modelDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new voice model object.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelDefinition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorContent> CreateVoiceModelAsync(this ISpeechServicesAPIv20 operations, ModelDefinition modelDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateVoiceModelWithHttpMessagesAsync(modelDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets specified voice model details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object GetVoiceModel(this ISpeechServicesAPIv20 operations, System.Guid id)
            {
                return operations.GetVoiceModelAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets specified voice model details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVoiceModelAsync(this ISpeechServicesAPIv20 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVoiceModelWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the voice model with the given id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice model
            /// </param>
            public static ErrorContent DeleteVoiceModel(this ISpeechServicesAPIv20 operations, System.Guid id)
            {
                return operations.DeleteVoiceModelAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the voice model with the given id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice model
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorContent> DeleteVoiceModelAsync(this ISpeechServicesAPIv20 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteVoiceModelWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the metadata of the voice model identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice model.
            /// </param>
            /// <param name='modelUpdate'>
            /// The updated values for the voice model.
            /// </param>
            public static object UpdateVoiceModel(this ISpeechServicesAPIv20 operations, System.Guid id, ModelUpdate modelUpdate)
            {
                return operations.UpdateVoiceModelAsync(id, modelUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the metadata of the voice model identified by the given ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice model.
            /// </param>
            /// <param name='modelUpdate'>
            /// The updated values for the voice model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateVoiceModelAsync(this ISpeechServicesAPIv20 operations, System.Guid id, ModelUpdate modelUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateVoiceModelWithHttpMessagesAsync(id, modelUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of supported locales for custom voice Models.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSupportedLocalesForVoiceModels(this ISpeechServicesAPIv20 operations)
            {
                return operations.GetSupportedLocalesForVoiceModelsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of supported locales for custom voice Models.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSupportedLocalesForVoiceModelsAsync(this ISpeechServicesAPIv20 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSupportedLocalesForVoiceModelsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets detail of the specified voice test.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice test.
            /// </param>
            public static object GetVoiceTest(this ISpeechServicesAPIv20 operations, System.Guid id)
            {
                return operations.GetVoiceTestAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets detail of the specified voice test.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice test.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVoiceTestAsync(this ISpeechServicesAPIv20 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVoiceTestWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified voice test.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice test.
            /// </param>
            public static ErrorContent DeleteVoiceTest(this ISpeechServicesAPIv20 operations, System.Guid id)
            {
                return operations.DeleteVoiceTestAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified voice test.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the voice test.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorContent> DeleteVoiceTestAsync(this ISpeechServicesAPIv20 operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteVoiceTestWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new voice test.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='voiceTestDefinition'>
            /// </param>
            public static ErrorContent CreateVoiceTest(this ISpeechServicesAPIv20 operations, VoiceTestDefinition voiceTestDefinition)
            {
                return operations.CreateVoiceTestAsync(voiceTestDefinition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new voice test.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='voiceTestDefinition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorContent> CreateVoiceTestAsync(this ISpeechServicesAPIv20 operations, VoiceTestDefinition voiceTestDefinition, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateVoiceTestWithHttpMessagesAsync(voiceTestDefinition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
