// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace CRIS.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// TranscriptionDefinition
    /// </summary>
    public partial class TranscriptionDefinition
    {
        /// <summary>
        /// Initializes a new instance of the TranscriptionDefinition class.
        /// </summary>
        public TranscriptionDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TranscriptionDefinition class.
        /// </summary>
        /// <param name="recordingsUrl">The location where to download the
        /// input data from</param>
        /// <param name="locale">The locale of the contained data</param>
        /// <param name="name">The name of the object</param>
        /// <param name="modelsProperty">An optional list of models used for
        /// the transcription.
        /// The list may contain an acoustic model, a language model or both.
        /// IF only one model is given, the base model will be used for the
        /// other part</param>
        /// <param name="description">The description of the object</param>
        /// <param name="properties">The custom properties of this
        /// entity</param>
        public TranscriptionDefinition(string recordingsUrl, string locale, string name, IList<ModelIdentity> modelsProperty = default(IList<ModelIdentity>), string description = default(string), IDictionary<string, string> properties = default(IDictionary<string, string>))
        {
            ModelsProperty = modelsProperty;
            RecordingsUrl = recordingsUrl;
            Locale = locale;
            Name = name;
            Description = description;
            Properties = properties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets an optional list of models used for the transcription.
        /// The list may contain an acoustic model, a language model or both.
        /// IF only one model is given, the base model will be used for the
        /// other part
        /// </summary>
        [JsonProperty(PropertyName = "models")]
        public IList<ModelIdentity> ModelsProperty { get; set; }

        /// <summary>
        /// Gets or sets the location where to download the input data from
        /// </summary>
        [JsonProperty(PropertyName = "recordingsUrl")]
        public string RecordingsUrl { get; set; }

        /// <summary>
        /// Gets or sets the locale of the contained data
        /// </summary>
        [JsonProperty(PropertyName = "locale")]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or sets the name of the object
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the description of the object
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the custom properties of this entity
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RecordingsUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RecordingsUrl");
            }
            if (Locale == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Locale");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (ModelsProperty != null)
            {
                foreach (var element in ModelsProperty)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
