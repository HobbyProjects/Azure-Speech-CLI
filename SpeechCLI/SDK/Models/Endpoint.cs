// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace CRIS.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Endpoint
    /// </summary>
    public partial class Endpoint : Entity
    {
        /// <summary>
        /// Initializes a new instance of the Endpoint class.
        /// </summary>
        public Endpoint()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Endpoint class.
        /// </summary>
        /// <param name="id">The identifier of this entity</param>
        /// <param name="endpointKind">The kind of this endpoint (e.g. custom
        /// speech, custom voice ...). Possible values include:
        /// 'SpeechRecognition', 'CustomVoice', 'LanguageGeneration'</param>
        /// <param name="endpointUrls">The list of endpoint urls</param>
        /// <param name="createdDateTime">The time-stamp when the object was
        /// created</param>
        /// <param name="lastActionDateTime">The time-stamp when the current
        /// status was entered</param>
        /// <param name="status">The status of the object. Possible values
        /// include: 'NotStarted', 'Running', 'Succeeded', 'Failed'</param>
        /// <param name="modelsProperty">Information about the deployed
        /// models</param>
        /// <param name="name">The name of the object</param>
        /// <param name="locale">The locale of the contained data</param>
        /// <param name="concurrentRecognitions">The number of concurrent
        /// recognitions the endpoint supports</param>
        /// <param name="contentLoggingEnabled">A value indicating whether
        /// content logging (audio &amp;amp; transcriptions) is being used for
        /// a deployment.
        /// Suppressing content logging will result in a higher cost for the
        /// deployment.
        /// Free subscriptions can only deploy true</param>
        /// <param name="description">The description of the object</param>
        /// <param name="properties">The custom properties of this
        /// entity</param>
        public Endpoint(System.Guid id, string endpointKind, IDictionary<string, string> endpointUrls, System.DateTime createdDateTime, System.DateTime lastActionDateTime, string status, IList<Model> modelsProperty, string name, string locale, int? concurrentRecognitions = default(int?), bool? contentLoggingEnabled = default(bool?), string description = default(string), IDictionary<string, string> properties = default(IDictionary<string, string>))
        {
            Id = id;
            EndpointKind = endpointKind;
            EndpointUrls = endpointUrls;
            CreatedDateTime = createdDateTime;
            LastActionDateTime = lastActionDateTime;
            Status = status;
            ModelsProperty = modelsProperty;
            ConcurrentRecognitions = concurrentRecognitions;
            ContentLoggingEnabled = contentLoggingEnabled;
            Name = name;
            Description = description;
            Properties = properties;
            Locale = locale;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the kind of this endpoint (e.g. custom speech, custom
        /// voice ...). Possible values include: 'SpeechRecognition',
        /// 'CustomVoice', 'LanguageGeneration'
        /// </summary>
        [JsonProperty(PropertyName = "endpointKind")]
        public string EndpointKind { get; set; }

        /// <summary>
        /// Gets or sets the list of endpoint urls
        /// </summary>
        [JsonProperty(PropertyName = "endpointUrls")]
        public IDictionary<string, string> EndpointUrls { get; set; }

        /// <summary>
        /// Gets or sets information about the deployed models
        /// </summary>
        [JsonProperty(PropertyName = "models")]
        public IList<Model> ModelsProperty { get; set; }

        /// <summary>
        /// Gets or sets the number of concurrent recognitions the endpoint
        /// supports
        /// </summary>
        [JsonProperty(PropertyName = "concurrentRecognitions")]
        public int? ConcurrentRecognitions { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether content logging (audio
        /// &amp;amp;amp; transcriptions) is being used for a deployment.
        /// Suppressing content logging will result in a higher cost for the
        /// deployment.
        /// Free subscriptions can only deploy true
        /// </summary>
        [JsonProperty(PropertyName = "contentLoggingEnabled")]
        public bool? ContentLoggingEnabled { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (EndpointKind == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EndpointKind");
            }
            if (EndpointUrls == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EndpointUrls");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (ModelsProperty == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ModelsProperty");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Locale == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Locale");
            }
            if (ModelsProperty != null)
            {
                foreach (var element in ModelsProperty)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
