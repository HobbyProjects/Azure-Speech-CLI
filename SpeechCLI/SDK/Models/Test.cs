// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace CRIS.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Test
    /// </summary>
    public partial class Test : Entity
    {
        /// <summary>
        /// Initializes a new instance of the Test class.
        /// </summary>
        public Test()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Test class.
        /// </summary>
        /// <param name="id">The identifier of this entity</param>
        /// <param name="wordErrorRate">The word error rate of the tested
        /// model</param>
        /// <param name="createdDateTime">The time-stamp when the object was
        /// created</param>
        /// <param name="lastActionDateTime">The time-stamp when the current
        /// status was entered</param>
        /// <param name="status">The status of the object. Possible values
        /// include: 'NotStarted', 'Running', 'Succeeded', 'Failed'</param>
        /// <param name="modelsProperty">Information about the models used for
        /// this accuracy test</param>
        /// <param name="name">The name of the object</param>
        /// <param name="dataset">Information about the dataset used in the
        /// test</param>
        /// <param name="resultsUrl">The URL that can be used to download the
        /// test results.
        /// Each line in the file represents a tab separated list of filename,
        /// reference transcription and decoder output.
        ///
        /// The URL will only be valid, if the test completed
        /// successfully</param>
        /// <param name="description">The description of the object</param>
        /// <param name="properties">The custom properties of this
        /// entity</param>
        public Test(System.Guid id, double wordErrorRate, System.DateTime createdDateTime, System.DateTime lastActionDateTime, string status, IList<Model> modelsProperty, string name, Dataset dataset = default(Dataset), string resultsUrl = default(string), string description = default(string), IDictionary<string, string> properties = default(IDictionary<string, string>))
        {
            Dataset = dataset;
            Id = id;
            WordErrorRate = wordErrorRate;
            ResultsUrl = resultsUrl;
            CreatedDateTime = createdDateTime;
            LastActionDateTime = lastActionDateTime;
            Status = status;
            ModelsProperty = modelsProperty;
            Name = name;
            Description = description;
            Properties = properties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets information about the dataset used in the test
        /// </summary>
        [JsonProperty(PropertyName = "dataset")]
        public Dataset Dataset { get; set; }

        /// <summary>
        /// Gets or sets the word error rate of the tested model
        /// </summary>
        [JsonProperty(PropertyName = "wordErrorRate")]
        public double WordErrorRate { get; set; }

        /// <summary>
        /// Gets or sets the URL that can be used to download the test results.
        /// Each line in the file represents a tab separated list of filename,
        /// reference transcription and decoder output.
        ///
        /// The URL will only be valid, if the test completed successfully
        /// </summary>
        [JsonProperty(PropertyName = "resultsUrl")]
        public string ResultsUrl { get; set; }

        /// <summary>
        /// Gets or sets information about the models used for this accuracy
        /// test
        /// </summary>
        [JsonProperty(PropertyName = "models")]
        public IList<Model> ModelsProperty { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (ModelsProperty == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ModelsProperty");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Dataset != null)
            {
                Dataset.Validate();
            }
            if (ModelsProperty != null)
            {
                foreach (var element in ModelsProperty)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
