// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace CRIS.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// VoiceTest
    /// </summary>
    public partial class VoiceTest
    {
        /// <summary>
        /// Initializes a new instance of the VoiceTest class.
        /// </summary>
        public VoiceTest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VoiceTest class.
        /// </summary>
        /// <param name="id">The identifier of this entity</param>
        /// <param name="textUri">The text URI of the voice test</param>
        /// <param name="createdDateTime">The time-stamp when the object was
        /// created</param>
        /// <param name="lastActionDateTime">The time-stamp when the current
        /// status was entered</param>
        /// <param name="status">The status of the object. Possible values
        /// include: 'NotStarted', 'Running', 'Succeeded', 'Failed'</param>
        /// <param name="model">Information about the models used in the voice
        /// test</param>
        /// <param name="voiceTestKind">The kind of this test (e.g. Text,
        /// SSML). Possible values include: 'Text', 'SSML'</param>
        /// <param name="audioUri">The audio URI of the voice test</param>
        public VoiceTest(System.Guid id, string textUri, System.DateTime createdDateTime, System.DateTime lastActionDateTime, string status, Model model, string voiceTestKind, string audioUri = default(string))
        {
            Id = id;
            AudioUri = audioUri;
            TextUri = textUri;
            CreatedDateTime = createdDateTime;
            LastActionDateTime = lastActionDateTime;
            Status = status;
            Model = model;
            VoiceTestKind = voiceTestKind;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the identifier of this entity
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Gets or sets the audio URI of the voice test
        /// </summary>
        [JsonProperty(PropertyName = "audioUri")]
        public string AudioUri { get; set; }

        /// <summary>
        /// Gets or sets the text URI of the voice test
        /// </summary>
        [JsonProperty(PropertyName = "textUri")]
        public string TextUri { get; set; }

        /// <summary>
        /// Gets or sets the time-stamp when the object was created
        /// </summary>
        [JsonProperty(PropertyName = "createdDateTime")]
        public System.DateTime CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or sets the time-stamp when the current status was entered
        /// </summary>
        [JsonProperty(PropertyName = "lastActionDateTime")]
        public System.DateTime LastActionDateTime { get; set; }

        /// <summary>
        /// Gets or sets the status of the object. Possible values include:
        /// 'NotStarted', 'Running', 'Succeeded', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets information about the models used in the voice test
        /// </summary>
        [JsonProperty(PropertyName = "model")]
        public Model Model { get; set; }

        /// <summary>
        /// Gets or sets the kind of this test (e.g. Text, SSML). Possible
        /// values include: 'Text', 'SSML'
        /// </summary>
        [JsonProperty(PropertyName = "voiceTestKind")]
        public string VoiceTestKind { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TextUri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TextUri");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (Model == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Model");
            }
            if (VoiceTestKind == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "VoiceTestKind");
            }
            if (Model != null)
            {
                Model.Validate();
            }
        }
    }
}
